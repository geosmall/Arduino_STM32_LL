// #include <UAVWare.h>
#include <uvos.h>
#include <uw_fs.h>

static uvos_fs_type_t UW_fs_type = FS_TYPE_INVALID;
static uvos_fs_type_t UW_fs_file;
static int fres;

/* Provide a flash file system drivers, for either
	 FatFS based SD Card or LittleFS based serial flash */
static const struct uvos_fs_driver_t uw_fs_driver = {
#if defined( UVOS_INCLUDE_FLASH )
	.is_mounted = UVOS_SPIF_IsMounted,
	.get_vol_info = UVOS_SPIF_GetVolInfo,
	.file_open = UVOS_SPIF_Open,
	.file_read = UVOS_SPIF_Read,
	.file_write = UVOS_SPIF_Write,
	.file_seek = UVOS_SPIF_Seek,
	.file_tell = UVOS_SPIF_Tell,
	.file_close = UVOS_SPIF_Close,
	.file_remove = UVOS_SPIF_Remove,
#elif defined( UVOS_INCLUDE_SDCARD )
	.is_mounted = UVOS_SDCARD_IsMounted,
	.get_vol_info = UVOS_SDCARD_GetVolInfo,
	.file_open = UVOS_SDCARD_Open,
	.file_read = UVOS_SDCARD_Read,
	.file_write = UVOS_SDCARD_Write,
	.file_seek = UVOS_SDCARD_Seek,
	.file_tell = UVOS_SDCARD_Tell,
	.file_close = UVOS_SDCARD_Close,
	.file_remove = UVOS_SDCARD_Remove,
#else
	#error No SPI based storage defined
#endif // defined( UVOS_INCLUDE_FLASH )
};
static const struct uvos_fs_driver_t *fs_driver = &uw_fs_driver;

/* Initialize logical file system
   Returns 0 on success, or -1 on failure */
int UW_fs_init( void )
{
	uvos_fs_vol_info_t vol_info;

	/* A file system should have been mounted in board.c init() */
	if ( !fs_driver->is_mounted() ) {
		return -1;
	}

	/* Retrieve file system type */
	fres = fs_driver->get_vol_info( &vol_info );
	if ( fres ) {
		return -1;
	}
	UW_fs_type = vol_info.type;

	return 0;
}

/* Check that file system is mounted and of valid type */
bool UW_fs_is_valid( void )
{
	if ( ( !fs_driver->is_mounted() ) || ( UW_fs_type == FS_TYPE_INVALID ) ) {
		return false;
	}
	return true;
}

#pragma GCC push_options
#pragma GCC optimize ("O0")

// Get volume info (total and free Kbytes)
// Returns 0 on success, or -1 on failure
int UW_fs_get_vol_info( UW_fs_vol_info_t *UW_vol_info )
{
	uvos_fs_vol_info_t vol_info;

	/* File system should be mounted */
	if ( !fs_driver->is_mounted() ) {
		return -1;
	}

	fres = fs_driver->get_vol_info( &vol_info );
	if ( fres ) {
		return -2;
	}
	UW_vol_info->vol_total_Kbytes = vol_info.vol_total_Kbytes;
	UW_vol_info->vol_free_Kbytes = vol_info.vol_free_Kbytes;
	UW_vol_info->type = vol_info.type;

	return 0;
}

#pragma GCC pop_options

// Open a file in a given mode per uvos_fopen_mode_t
// Returns 0 if file open is successful, -1 if unsuccessful
int UW_fs_open( UW_fs_file_t *file, const char *path, uvos_fopen_mode_t mode )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	/* Assign mounted FS tpe to file handle passed to us */
	file->type = UW_fs_type;

	fres = fs_driver->file_open( ( uintptr_t * )&file->fatfile, path, mode );
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Read data from a file into a buffer
// Returns the number of bytes read, or -1 on failure
int UW_fs_read( UW_fs_file_t *file, void *buf, uint32_t bytes_to_read, uint32_t *bytes_read )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	fres = fs_driver->file_read( ( uintptr_t * )&file->fatfile, buf, bytes_to_read, bytes_read );
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Write data from a buffer into a file
// Returns the number of bytes written, or -1 on failure
int UW_fs_write( UW_fs_file_t *file, const void *buf, uint32_t bytes_to_write, uint32_t *bytes_written )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	fres = fs_driver->file_write( ( uintptr_t * )&file->fatfile, buf, bytes_to_write, bytes_written );
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Seek to a position in a file
// Returns 0 on success, or -1 on failure
int UW_fs_seek( UW_fs_file_t *file, uint32_t offset )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	fres = fs_driver->file_seek( ( uintptr_t * )&file->fatfile, offset );
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Get the current position in a file
// Returns the position, or -1 on failure
uint32_t UW_fs_tell( UW_fs_file_t *file )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	fres = fs_driver->file_tell( ( uintptr_t * )&file->fatfile);
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Close a file
// Returns 0 on success, or -1 on failure
int UW_fs_close( UW_fs_file_t *file )
{
	/* Verify File system is mounted and valid type */
	if ( !UW_fs_is_valid() ) {
		return -1;
	}

	fres = fs_driver->file_close( ( uintptr_t * )&file->fatfile);
	if ( fres ) {
		return -2;
	}

	return 0;
}

// Delete a file
// Returns 0 on success, or -1 on failure
int UW_fs_remove( const char *path )
{
	// if ( UW_fs_type == FS_TYPE_FATFS ) {
	// 	// UVOS_Assert( file->type == FS_TYPE_FATFS );
	// 	fres = UVOS_SDCARD_Remove( path );
	// 	if ( fres ) {
	// 		return -1;
	// 	}
	// } else if ( UW_fs_type == FS_TYPE_LITTLEFS ) {
	// 	return -1;
	// }
	return 0;
}